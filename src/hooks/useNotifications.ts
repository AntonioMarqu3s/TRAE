import { useState, useEffect } from 'react';

/**
 * Hook personalizado para gerenciar notifica√ß√µes locais no PWA
 * Fornece funcionalidades para solicitar permiss√£o e enviar notifica√ß√µes
 */
export const useNotifications = () => {
  const [permission, setPermission] = useState<NotificationPermission>('default');
  const [isSupported, setIsSupported] = useState(false);

  useEffect(() => {
    // Verificar se as notifica√ß√µes s√£o suportadas
    if ('Notification' in window) {
      setIsSupported(true);
      setPermission(Notification.permission);
    }
  }, []);

  /**
   * Solicita permiss√£o para enviar notifica√ß√µes
   */
  const requestPermission = async (): Promise<NotificationPermission> => {
    if (!isSupported) {
      console.warn('Notifica√ß√µes n√£o s√£o suportadas neste navegador');
      return 'denied';
    }

    try {
      const result = await Notification.requestPermission();
      setPermission(result);
      return result;
    } catch (error) {
      console.error('Erro ao solicitar permiss√£o para notifica√ß√µes:', error);
      return 'denied';
    }
  };

  /**
   * Envia uma notifica√ß√£o local
   */
  const sendNotification = (title: string, options?: NotificationOptions) => {
    console.log(`üîî Tentando enviar notifica√ß√£o: "${title}"`);
    console.log(`üì± isSupported: ${isSupported}`);
    console.log(`üîê permission: ${permission}`);
    
    if (!isSupported) {
      console.warn('‚ùå Notifica√ß√µes n√£o s√£o suportadas');
      return null;
    }

    if (permission !== 'granted') {
      console.warn('‚ùå Permiss√£o para notifica√ß√µes n√£o foi concedida');
      return null;
    }

    const defaultOptions: NotificationOptions = {
      icon: '/logo192.png',
      badge: '/logo192.png',
      ...options
    };

    console.log(`üìã Op√ß√µes da notifica√ß√£o:`, defaultOptions);

    try {
      console.log(`üöÄ Criando notifica√ß√£o...`);
      const notification = new Notification(title, defaultOptions);
      console.log(`‚úÖ Notifica√ß√£o criada com sucesso!`, notification);
      
      // Auto-fechar ap√≥s 5 segundos
      setTimeout(() => {
        console.log(`üîí Fechando notifica√ß√£o: "${title}"`);
        notification.close();
      }, 5000);

      return notification;
    } catch (error) {
      console.error('‚ùå Erro ao enviar notifica√ß√£o:', error);
      return null;
    }
  };

  /**
   * Envia notifica√ß√£o sobre nova tarefa
   */
  const notifyNewTask = (taskTitle: string, columnName: string) => {
    sendNotification('Nova Tarefa Criada! üìù', {
      body: `"${taskTitle}" foi adicionada √† coluna "${columnName}"`,
      tag: 'new-task',
      data: { type: 'new-task', taskTitle, columnName }
    });
  };

  /**
   * Envia notifica√ß√£o sobre tarefa movida
   */
  const notifyTaskMoved = (taskTitle: string, fromColumn: string, toColumn: string) => {
    sendNotification('Tarefa Movida! üîÑ', {
      body: `"${taskTitle}" foi movida de "${fromColumn}" para "${toColumn}"`,
      tag: 'task-moved',
      data: { type: 'task-moved', taskTitle, fromColumn, toColumn }
    });
  };

  /**
   * Envia notifica√ß√£o sobre tarefa vencendo
   */
  const notifyTaskDueSoon = (taskTitle: string, daysLeft: number) => {
    const emoji = daysLeft === 0 ? 'üö®' : daysLeft === 1 ? '‚ö†Ô∏è' : 'üìÖ';
    const message = daysLeft === 0 
      ? 'vence hoje!' 
      : daysLeft === 1 
        ? 'vence amanh√£!' 
        : `vence em ${daysLeft} dias!`;

    sendNotification(`Tarefa Vencendo ${emoji}`, {
      body: `"${taskTitle}" ${message}`,
      tag: 'task-due',
      data: { type: 'task-due', taskTitle, daysLeft }
    });
  };

  /**
   * Envia notifica√ß√£o sobre tarefa conclu√≠da
   */
  const notifyTaskCompleted = (taskTitle: string) => {
    sendNotification('Tarefa Conclu√≠da! ‚úÖ', {
      body: `Parab√©ns! "${taskTitle}" foi conclu√≠da`,
      tag: 'task-completed',
      data: { type: 'task-completed', taskTitle }
    });
  };

  /**
   * Envia notifica√ß√£o sobre tarefa atrasada
   */
  const notifyOverdueTask = (taskTitle: string, daysOverdue: number) => {
    sendNotification('Tarefa Atrasada! üö®', {
      body: `"${taskTitle}" est√° atrasada h√° ${daysOverdue} dia${daysOverdue > 1 ? 's' : ''}`,
      tag: 'task-overdue',
      data: { type: 'task-overdue', taskTitle, daysOverdue }
    });
  };

  /**
   * Envia notifica√ß√£o sobre tarefas do dia
   */
  const notifyTodayTasks = (count: number) => {
    console.log(`üìã notifyTodayTasks chamada com count: ${count}`);
    
    if (count === 0) {
      console.log(`üìã Count √© 0, n√£o enviando notifica√ß√£o`);
      return;
    }
    
    const message = count === 1 
      ? 'Voc√™ tem 1 tarefa para hoje!' 
      : `Voc√™ tem ${count} tarefas para hoje!`;

    console.log(`üìã Enviando notifica√ß√£o de tarefas do dia: "${message}"`);
    
    const result = sendNotification('Tarefas do Dia üìã', {
      body: message,
      tag: 'today-tasks',
      data: { type: 'today-tasks', count }
    });
    
    console.log(`üìã Resultado da notifica√ß√£o de tarefas do dia:`, result);
  };

  /**
   * Envia resumo de tarefas atrasadas
   */
  const notifyOverdueSummary = (count: number) => {
    console.log(`‚ö†Ô∏è notifyOverdueSummary chamada com count: ${count}`);
    
    if (count === 0) {
      console.log(`‚ö†Ô∏è Count √© 0, n√£o enviando notifica√ß√£o`);
      return;
    }
    
    const message = count === 1 
      ? 'Voc√™ tem 1 tarefa atrasada!' 
      : `Voc√™ tem ${count} tarefas atrasadas!`;

    console.log(`‚ö†Ô∏è Enviando notifica√ß√£o de tarefas atrasadas: "${message}"`);
    
    const result = sendNotification('Tarefas Atrasadas ‚ö†Ô∏è', {
      body: message,
      tag: 'overdue-summary',
      data: { type: 'overdue-summary', count }
    });
    
    console.log(`‚ö†Ô∏è Resultado da notifica√ß√£o de tarefas atrasadas:`, result);
  };

  /**
   * Verifica e notifica sobre tarefas do dia e atrasadas
   */
  const checkAndNotifyDailyTasks = (tasks: any[]) => {
    if (!isSupported || permission !== 'granted') return;

    console.log('üîç Iniciando verifica√ß√£o de tarefas di√°rias...');

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);

    let todayTasks = 0;
    let overdueTasks = 0;

    tasks.forEach(task => {
      console.log(`üìù Verificando tarefa: "${task.title}" - Status: "${task.status}" - Due Date: ${task.due_date}`);
      
      // Pular tarefas j√° conclu√≠das
      if (task.status === 'done' || task.status === 'conclu√≠do' || task.status === 'feito') {
        console.log(`‚úÖ Tarefa "${task.title}" j√° est√° conclu√≠da, pulando...`);
        return;
      }

      // Verificar se tem data de vencimento (corrigido: due_date em vez de dueDate)
      if (task.due_date) {
        const dueDate = new Date(task.due_date);
        dueDate.setHours(0, 0, 0, 0);

        console.log(`üìÖ Data de vencimento da tarefa "${task.title}": ${dueDate.toDateString()}`);
        console.log(`üìÖ Data de hoje: ${today.toDateString()}`);

        // Verificar se √© tarefa do dia
        if (dueDate.getTime() === today.getTime()) {
          todayTasks++;
          console.log(`üéØ Tarefa "${task.title}" √© para hoje!`);
        }
        // Verificar se est√° atrasada
        else if (dueDate < today) {
          overdueTasks++;
          console.log(`‚ö†Ô∏è Tarefa "${task.title}" est√° atrasada!`);
        }
      } else {
        console.log(`üìù Tarefa "${task.title}" n√£o tem data de vencimento`);
      }
    });

    console.log(`üìä Resumo: ${todayTasks} tarefas para hoje, ${overdueTasks} tarefas atrasadas`);

    // Notificar sobre tarefas do dia (com delay para n√£o sobrecarregar)
    if (todayTasks > 0) {
      setTimeout(() => {
        console.log(`üìã Enviando notifica√ß√£o para ${todayTasks} tarefas do dia`);
        notifyTodayTasks(todayTasks);
      }, 1000);
    }

    // Notificar sobre tarefas atrasadas (com delay maior)
    if (overdueTasks > 0) {
      setTimeout(() => {
        console.log(`‚ö†Ô∏è Enviando notifica√ß√£o para ${overdueTasks} tarefas atrasadas`);
        notifyOverdueSummary(overdueTasks);
      }, 2000);
    }

    // Se n√£o h√° tarefas para notificar
    if (todayTasks === 0 && overdueTasks === 0) {
      console.log('‚ú® Nenhuma tarefa urgente encontrada!');
    }
  };

  return {
    permission,
    isSupported,
    requestPermission,
    sendNotification,
    notifyNewTask,
    notifyTaskMoved,
    notifyTaskDueSoon,
    notifyTaskCompleted,
    notifyOverdueTask,
    notifyTodayTasks,
    notifyOverdueSummary,
    checkAndNotifyDailyTasks
  };
};